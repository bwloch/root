{

gROOT->Reset();
gStyle->SetNdivisions(505,"XY");
gStyle->SetStatBorderSize(1);
gStyle->SetStatW(0.2);
gStyle->SetStatH(0.1);
gStyle->SetCanvasBorderMode(0);
gStyle->SetPadBorderMode(0);
gStyle->SetCanvasColor(0);
gStyle->SetFrameBorderMode(0);
gStyle->SetPadColor(0);
gStyle->SetStatColor(0);
gStyle->SetLabelSize(.04,"xy");
gStyle->SetTitleXOffset(.9);
gStyle->SetTitleXSize(0.05);
gStyle->SetTitleYOffset(1.);
gStyle->SetTitleYSize(0.05);
gStyle->SetTitleW(0.5);
gStyle->SetTitleH(0.08);
gStyle->SetTitleBorderSize(1);
gStyle->SetTitleFillColor(0);
gStyle->SetPadLeftMargin(0.12);
gStyle->SetPadRightMargin(0.15);
gStyle->SetPadBottomMargin(.1);
gStyle->SetTextSize(.03);
gStyle->SetStatFontSize(.03);
//gStyle->SetOptStat(22);
gStyle->SetPalette(1);
//##################################################################
 Double_t xcenter1[301], xcenter2[301], banana_min[301], xx[301], xx1[301], xx2[301];
 TH1D *slice[301];
 const Int_t peak_gap=8; 
 const Int_t slice_width=4;
 Int_t i, max1, max2;
 char file1[100], file2[100], points[2000];
 
TCanvas *proj=new TCanvas("proj","proj",600,400); 
 TCanvas *proj1=new TCanvas("proj1","proj1",600,400); 

 TCanvas *c=new TCanvas("de-e","de-e",600,400);
 c->Divide(1,0);

 char sl1[100], sl2[100];
 char slicename[135];
 char hname[135];
 ofstream stream_out;
 char filename[100], filenameps[100], filename1[100], filenameps1[100];

 
 for(int e=2;e<3;e++){
   for(int de=7;de<9;de++){

       sprintf(file1,"ede_%d_%d.root",e,de);
       f1=new TFile(file1);
       TH2F *p1=f1->Get("C3");
       c->cd(1);
       p1->Draw("colz");
       c->Draw();

       //sprintf(file2,"slices_E%d_dE%d.dat",e,de);
       //stream_out.open(file2);
 
      for (Int_t i=0; i<p1->GetNbinsX(); i=i+slice_width)
	 {
	   int k=0.25*(i+slice_width);
	   xx1[k] = p1->GetXaxis()->GetBinCenter((k-1)*slice_width + 0.5*slice_width);
	   xx2[k] = p1->GetXaxis()->GetBinCenter((k-1)*slice_width + 0.5*slice_width +1);
	   xx[k] = (0.5*(xx2[k]-xx1[k]))+xx1[k];
	   sprintf(slicename, "slice%d",k);
	   sprintf(hname, "h%d",k);
	   proj->cd(k);
	   slice[k]=p1->ProjectionY(slicename,i,i+slice_width);
	   slice[k]->GetXaxis()->SetLimits(100,800);
	   slice[k]->Draw();
	   max1[k] = slice[k]->GetMaximumBin();
	   max2[k] = max1[k]+peak_gap;
	
	   proj1->cd(k);    
	   TH1D *h = slice[k]->Clone(hname);
	   xcenter1[k] = h->GetXaxis()->GetBinCenter(max1[k]);
	   xcenter2[k] = h->GetXaxis()->GetBinCenter(max2[k]);
	   h->SetAxisRange(xcenter1[k], xcenter2[k], "X");
	   h->Draw();
	   h->GetMinimumBin();
	   banana_min[k] = h->GetXaxis()->GetBinCenter(h->GetMinimumBin());
	  
	   /*	  
		  stream_out <<k<<setw(5)
		  <<xx[k]<<setw(5)
		  <<banana_min[k]
		  <<endl;
	   */
	   }
       
//sprintf(filename,"proj_full_%d_%d.root",e,de);
//sprintf(filenameps,"proj_full_%d_%d.ps",e,de);
//sprintf(filename1,"proj_cut_%d_%d.root",e,de);
//sprintf(filenameps1,"proj_cut_%d_%d.ps",e,de);

//proj->SaveAs(filename);
//proj->SaveAs(filenameps);
//proj1->SaveAs(filename1);
//proj1->SaveAs(filenameps1);
  

//stream_out.close();
 
   }
 }

 

}



